// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`linter=mypy fixture=basic version=1.10.1 1`] = `
{
  "issues": [
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 10,
          "startLine": 14,
        },
      },
      "message": "Argument 1 to "greeting" has incompatible type "bytes"; expected "str"",
      "mode": "MODE_BLOCK",
      "ruleKey": "arg-type",
      "snippet": "greeting(b"Alice")",
      "snippetWithContext": "
def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")


greeting(3)
greeting(b"Alice")
a = printer()
c: str = 4

from source import Bar

def bad_foo(bar: Bar) -> str:
  return bar.a + bar.b",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 10,
          "startLine": 13,
        },
      },
      "message": "Argument 1 to "greeting" has incompatible type "int"; expected "str"",
      "mode": "MODE_BLOCK",
      "ruleKey": "arg-type",
      "snippet": "greeting(3)",
      "snippetWithContext": "from . import mypy_import2

def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")


greeting(3)
greeting(b"Alice")
a = printer()
c: str = 4

from source import Bar

def bad_foo(bar: Bar) -> str:
  return bar.a + bar.b",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 10,
          "startLine": 16,
        },
      },
      "message": "Incompatible types in assignment (expression has type "int", variable has type "str")",
      "mode": "MODE_BLOCK",
      "ruleKey": "assignment",
      "snippet": "c: str = 4",
      "snippetWithContext": "    return "Hello " + name


def printer() -> None:
    print("Hello")


greeting(3)
greeting(b"Alice")
a = printer()
c: str = 4

from source import Bar

def bad_foo(bar: Bar) -> str:
  return bar.a + bar.b",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 5,
          "startLine": 15,
        },
      },
      "message": ""printer" does not return a value (it only ever returns None)",
      "mode": "MODE_BLOCK",
      "ruleKey": "func-returns-value",
      "snippet": "a = printer()",
      "snippetWithContext": "def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")


greeting(3)
greeting(b"Alice")
a = printer()
c: str = 4

from source import Bar

def bad_foo(bar: Bar) -> str:
  return bar.a + bar.b",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 1,
          "startLine": 1,
        },
      },
      "message": "Library stubs not installed for "google.protobuf"",
      "mode": "MODE_BLOCK",
      "ruleKey": "import-untyped",
      "snippet": "import google.protobuf.descriptor_pb2 as d",
      "snippetWithContext": "import google.protobuf.descriptor_pb2 as d

from . import mypy_import2

def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")
",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_HIGH",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 1,
          "startLine": 1,
        },
      },
      "message": "Library stubs not installed for "google.protobuf.descriptor_pb2"",
      "mode": "MODE_BLOCK",
      "ruleKey": "import-untyped",
      "snippet": "import google.protobuf.descriptor_pb2 as d",
      "snippetWithContext": "import google.protobuf.descriptor_pb2 as d

from . import mypy_import2

def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")
",
      "tool": "mypy",
    },
    {
      "category": "CATEGORY_LINT",
      "documentationUrl": "https://mypy.readthedocs.io/en/stable/error_code_list.html",
      "level": "LEVEL_LOW",
      "location": {
        "path": "basic.in.py",
        "range": {
          "startColumn": 1,
          "startLine": 1,
        },
      },
      "message": "Hint: "python3 -m pip install types-protobuf" (or run "mypy --install-types" to install all missing stub packages) See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports",
      "mode": "MODE_BLOCK",
      "ruleKey": "note",
      "snippet": "import google.protobuf.descriptor_pb2 as d",
      "snippetWithContext": "import google.protobuf.descriptor_pb2 as d

from . import mypy_import2

def greeting(name: str) -> str:
    return "Hello " + name


def printer() -> None:
    print("Hello")
",
      "tool": "mypy",
    },
  ],
}
`;
